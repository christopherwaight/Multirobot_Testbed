function [Vf] = SwarmSimAttract(RobotParams, NRobot, SensorRange)
%SwarmSimAttract Attract behavior for Swarm_Adaptive_Navigation_Simulator.slx
%   LATEST UPDATE: 08/30/2018 by NJM 
% This attract behavior is called by the Robot # behavior blocks in
%   Swarm_Adaptive_Naviagtion_Simulator/Attract blocks. The attract behavior
%   causes the robots to clump together. It is set for constant velocity
%   and for constant force. For example, robots feel same attractive force
%   to each other when they are 10 units away or 1 unit away. Attraction is
%   based on average vector between "self" and all other robots within
%   range. 


% Determine number of robots based off length of robot params vector 
N= floor(length(RobotParams)/4); 

%% initialize variables 
% position variables for 3-DOF omnibot are x,y,and theta (rotation about z-axis)
x=zeros(1,N);               
y=zeros(1,N);
% d - distance between "self" and other robot
d=zeros(1,N);
% O - angle between "self" and other robot
O=zeros(1,N); 
% [Vx, Vy] = velocity in x direction, velocity in y direction,
Vx=zeros(1,N);
Vy=zeros(1,N);

%Vft is final angular velocity about z
Vft=0;
% Vf - final velocity as a vector.
Vf=[0.0 0.0 0.0];


%% Set x and y inputs into an array
x=RobotParams(1:4:end);
y=RobotParams(2:4:end);

%% Attract Behavior 

% Determine distance and angle to each robot 
d = sqrt(abs(x(NRobot)-x).^2+abs(y(NRobot)-y).^2);
O = atan2((y-y(NRobot)),(x-x(NRobot)));
Vx= cos(O);
Vy= sin(O);

% If robot is within sensor range of  Nrobot, it is attracted to that
% robot. If the  robot is outside of sensor range, then that robot has
% no effect on NRobot's velocity. 

idx=find(d<=SensorRange);

%Calculate velocity vector components: 
Vfx= sum(Vx(idx));
Vfy= sum(Vy(idx)); 
mag = sqrt(Vfx^2+Vfy^2); 

Vf= [Vfx Vfy Vft]/mag;


end 

