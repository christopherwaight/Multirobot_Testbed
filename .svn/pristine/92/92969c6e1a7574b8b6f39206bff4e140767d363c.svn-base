function [Vf] = SwarmSimFindMin(RobotParams, NRobot, SensorRange)
%SwarmSimFindMin Find Min behavior called in Find Min block of Swarm_Robot_Base
%   SwarmSimFindMin takes the inputs of RobotParams, NRobot, and Sensor
%   Range and outputs the resultant velocity. Individual velocity of robot
%   is determined by comparing "Sensor Value" to surrounding robots and
%   moving in the direction of lesser readings.

%% Initialize Variables

% Determine number of robots based off length of robot params vector 
N= floor(length(RobotParams)/4); 

%% initialize variables 
% relevant position variables for 3-DOF omnibot are x and y
x=zeros(1,N);               
y=zeros(1,N);
SensorValue= zeros(1,N); % this is the value of the "sensor reading" from each robot's "on-board" sensor. 
% d - distance between "self" and other robot
d=zeros(1,N);
% O - angle between "self" and other robot
O=zeros(1,N); 
x_comp=zeros(1,N);
y_comp=zeros(1,N);
amp=zeros(1,N);
%Final angular velocity about z
Vft=0;
% Vf - final velocity as a vector.
Vf=[0.0 0.0 0.0];

%% Set x,y, and SensorValue inputs into an array
x=RobotParams(1:4:end);
y=RobotParams(2:4:end);
SensorValue=RobotParams(4:4:end);

%% Find Min/Max SV Difference Method

% Determine distance and angle to each robot 
d = sqrt(( x(NRobot)-x).^2 + (y(NRobot)-y).^2 );
O = atan2((y-y(NRobot)),(x-x(NRobot)));
amp = SensorValue-SensorValue(NRobot);
%determine indices of robots within sensor range of self
inRange_idx=find(d<=SensorRange);

x_comp=cos(O(inRange_idx)).*amp(inRange_idx);
y_comp=sin(O(inRange_idx)).*amp(inRange_idx);

Vfx=sum(x_comp);
Vfy=sum(y_comp);
mag = sqrt(Vfx^2+Vfy^2);

% Convert the sums into a vector that is then passed to the robot:
Vf= -[Vfx(1) Vfy(1) Vft]./mag(1);

end




